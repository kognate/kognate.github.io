<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pretty/Trivial - Python</title><link href="http://www.prettytrivial.com/" rel="alternate"></link><link href="http://www.prettytrivial.com/feeds/python.atom.xml" rel="self"></link><id>http://www.prettytrivial.com/</id><updated>2018-01-06T00:00:00-05:00</updated><entry><title>Mocking and refactoring for Testing in Python</title><link href="http://www.prettytrivial.com/python-mocking-testing.html" rel="alternate"></link><published>2018-01-06T00:00:00-05:00</published><updated>2018-01-06T00:00:00-05:00</updated><author><name>Joshua B. Smith</name></author><id>tag:www.prettytrivial.com,2018-01-06:/python-mocking-testing.html</id><summary type="html">&lt;p&gt;How mocks can help your testing&lt;/p&gt;</summary><content type="html">&lt;h1&gt;The Problem&lt;/h1&gt;
&lt;p&gt;(note: the full example can be found
&lt;a href="https://gist.github.com/kognate/ec3efec9b923b1714a05c3a2d151636c"&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I was doing a code review and I came to the following function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def send_email(email_from, email_to, email_subject, email_msg):
    email_msg = MIMEText(email_msg)
    email_msg[&amp;#39;Subject&amp;#39;] = email_subject
    email_msg[&amp;#39;From&amp;#39;] = email_from
    email_msg[&amp;#39;To&amp;#39;] = email_to

    try:
        smtpObj = smtplib.SMTP(os.getenv(&amp;#39;SMTP_SERVER&amp;#39;))
        smtpObj.sendmail(email_from, email_to.split(&amp;#39;,&amp;#39;), email_msg.as_string())
        smtpObj.quit()
    except smtplib.SMTPException as exc:
        error = exc.args
        error_msg = error.message
        print(error_msg)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There were no tests for this function,  and I couldn't really think of
how best to test it myself. That is usually a sign that the code is
not awesome and should be refactored.&lt;/p&gt;
&lt;p&gt;How?  With &lt;code&gt;with&lt;/code&gt;!&lt;/p&gt;
&lt;h1&gt;A potential solution&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;smtplib&lt;/code&gt; supports &lt;code&gt;with&lt;/code&gt; and automatically closes the connection
when used.  The old function would silently swallow any
SMTPException which is never a good choice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def send_email(email_from, email_to, email_subject, email_msg):

    with smtplib.SMTP(os.getenv(&amp;#39;SMTP_SERVER&amp;#39;),&amp;#39;localhost&amp;#39;) as smtpObj:
        email_msg = MIMEText(email_msg)
        email_msg[&amp;#39;Subject&amp;#39;] = email_subject
        email_msg[&amp;#39;From&amp;#39;] = email_from
        email_msg[&amp;#39;To&amp;#39;] = email_to
        smtpObj.sendmail(email_from, email_to.split(&amp;#39;,&amp;#39;), email_msg.as_string())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But this still leaves open the question of how to test this.  I don't
want to actually send an email every time the tests are run.  The
solution to that comes from the &lt;code&gt;mock&lt;/code&gt; package in &lt;code&gt;unittest&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TestFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

    &lt;span class="kd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smtplib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sendmail&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;smtplib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;test_send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mock_close&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mock_sendmail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;test_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TEST&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;testuser@test.com&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;testuser@test.com,testuser2@test.com&amp;#39;&lt;/span&gt;

        &lt;span class="nx"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;mock_close&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert_called&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nx"&gt;mock_sendmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assert_called_with&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                         &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                         &lt;span class="nx"&gt;test_message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;mock&lt;/code&gt; library includes the ability to &lt;code&gt;patch&lt;/code&gt; an existing class
(including a class I don't own).  When I patch an object, I replace
one (or more) of its methods with a new,  fake method.  &lt;/p&gt;
&lt;p&gt;This example uses the &lt;code&gt;@patch&lt;/code&gt; decorator to replace two methods on
the &lt;code&gt;SMTP&lt;/code&gt; class.  The fist one, &lt;code&gt;close&lt;/code&gt; (because decorators are
applied in reverse order) must be overridden because close is
automatically called when the block exits.
The second, &lt;code&gt;sendmail&lt;/code&gt; I call explicitly.&lt;/p&gt;
&lt;p&gt;When using &lt;code&gt;patch&lt;/code&gt; I can check to make sure
the method and its arguments have been called correctly. The new
function now is easily testable and I don't have to provide a working
SMTP server for my tests.&lt;/p&gt;</content><category term="testing"></category><category term="mocking"></category><category term="python"></category></entry></feed>